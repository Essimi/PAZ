<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.meeting.dao.MeetingDao">
	
	
<!-- 검색 -->	
		<sql id="searchFrag">
		and p_code = #{detailSearch.pCode,jdbcType=VARCHAR}
			<if test="searchVO neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<choose>
					<when test="searchVO.searchType eq 'meetingTopic'">
						and INSTR(MEETING_TOPIC, #{searchVO.searchWord}) > 0
					</when>
					<when test="searchVO.searchType eq 'memId'">
						and INSTR(mem_id, #{searchVO.searchWord}) > 0
					</when>
					<when test="searchVO.searchType eq 'meetingContent'">
						and INSTR(MEETING_CONTENT, #{searchVO.searchWord}) > 0
					</when>
					<otherwise>
						and INSTR(MEETING_TOPIC, #{searchVO.searchWord}) > 0
								OR INSTR(mem_Id, #{searchVO.searchWord}) > 0
								OR INSTR(MEETING_CONTENT, #{searchVO.searchWord}) > 0
					</otherwise>
				</choose>
			</if>
	</sql>
	
<!-- 페이지를 위한 레코드 수 -->	
	<select id="selectTotalRecord" resultType="int">
		SELECT COUNT(*)
		FROM meeting
		WHERE 1=1
		<include refid="searchFrag" />  <!-- ??? -->
	</select>
	
	
<!-- 회의록 리스트 -->	
	<select id="selectMeetingList" resultType="kr.or.ddit.vo.MeetingVO" parameterType="kr.or.ddit.vo.PagingVO">	
		SELECT B.*
				FROM (
					SELECT A.*, ROWNUM RNUM
					FROM (
						SELECT
		                    meeting_code,    p_code,    a.mem_id mem_id,
		                    meeting_topic,    meeting_content,    meeting_result,
		                     TO_CHAR(meeting_date,'YYYY-MM-DD')meeting_date, 
		                    MEM_NICKNAME
						FROM meeting a, member b
                       where a.mem_id = b.mem_id 
						<include refid="searchFrag" />  
						ORDER BY meeting_code DESC
					) A  
				) B
			<![CDATA[
					WHERE  RNUM >= #{startRow} AND RNUM <= #{endRow}
			]]>
		</select>
	
	
<!-- 회의록 상세조회와 회의록 참여자 조회 -->
	<resultMap type="kr.or.ddit.vo.MeetingVO" id="memberMap" autoMapping="true">
		<id property="pCode" column="p_code"/>				<!-- 회의록의 vo 기본값 지정 (기본키)-->
		<collection property="memberList" javaType="java.util.List" ofType="kr.or.ddit.vo.MemberVO" autoMapping="true">
			<id property="memId" column="MEM_LIST" />		<!-- 맴버 vo에서 리스트를 잇는다(조인 역할) -->
			<result property="memNickname" column="MEM_NICKNAME"/> <!-- 원하는 거 넣기 -->
		</collection>
	</resultMap>
	
	<select id="selectMeeting" parameterType="string" resultMap="memberMap">
		SELECT
		    a.meeting_code,
		    p_code,
		    a.mem_id,
		    b.mem_list,
		    meeting_topic,
		    meeting_content,
		    meeting_result,
		    TO_CHAR(meeting_date,'YYYY-MM-DD')meeting_date, 
		    a.mem_nickname mem_nickname_to,
		    b.mem_nickname mem_nickname_we
		FROM
		    (SELECT
		    meeting_code,
		    p_code,
		    c.mem_id,
		    meeting_topic,
		    meeting_content,
		    meeting_result,
		    meeting_date,
		    d.mem_nickname
		    
		FROM
		    meeting c, member d
		where
		     c.mem_id = d.mem_id) a
		    LEFT OUTER JOIN (
		        SELECT
		            mem_list,
		            meeting_code,
		            mem_nickname
		        FROM
		            meeting_mem
		            INNER JOIN member ON ( mem_id = mem_list )
        ) B   
		    ON(A.meeting_code = B.meeting_code)
		WHERE A.meeting_code = #{meeting_code}
		
	</select>
	
	<!-- 회의록 작성문 인서트 -->
	<insert id="inser1tMeeting" parameterType="kr.or.ddit.vo.MeetingVO">
		<selectKey keyProperty="meetingCode" resultType="String" order="BEFORE">
			select 'MEETING' || LPAD(MEETING_SEQ.NEXTVAL, 5, '0')
			 FROM DUAL
		</selectKey>
			INSERT INTO meeting (
					    meeting_code,
					    p_code,
					    mem_id,
					    meeting_topic,
					    meeting_content,
					    meeting_result,
					    meeting_date
					) VALUES (
			   	  	    #{meetingCode,jdbcType=VARCHAR},
						#{pCode,jdbcType=VARCHAR},
						#{write,jdbcType=VARCHAR},
						#{meetingTopic,jdbcType=VARCHAR},
						#{meetingContent,jdbcType=CLOB},
						#{meetingResult,jdbcType=CLOB},
						SYSDATE
					)
	</insert>
	
	
	
	<!-- 회의록 참여자 인원 체크후 인서트용 -->
	<insert id="inser2tMeeting" parameterType="kr.or.ddit.vo.MeetingVO" >
		INSERT ALL
		<foreach collection="memberList" item="member">
		INTO meeting_mem (
		    mem_list,							<!-- ,스플릿해서 리스트에 넣고 만든 참여자들 넣는곳 -->
		    meeting_code						<!-- 프로젝트 코드 -->
		) VALUES (
		    #{member.memId,jdbcType=VARCHAR},	<!-- 여러 참여자가 들어가는곳 -->
			#{meetingCode,jdbcType=VARCHAR}		<!-- 프로젝트 코드 들어가는곳 -->
		)
		</foreach>
		
		SELECT * FROM DUAL  					<!-- 데이터 작성시 연산용으로 보기위해 쓰는곳  -->				
	</insert>
	
	

	<!-- 회의록 참여자 조회  -->
	<select id="chackSelect" parameterType="DataListVO" resultType="ProjectMemberVO">
		select A.*, nvl(b.mem_list,'y') checkyn
		  from
		      (
		      select
		          a.mem_id,
		          p_code,
		          mem_nickname
		      from
		          p_mem a inner join member b
		          on(a.mem_id = b.mem_id)
		      where p_code = #{pCode,jdbcType=VARCHAR}
		        and a.out_status  = 0    
		        ) A left outer join (select 
		              mem_list,
		              meeting_code
		         from 
		              meeting_mem
		        where
		              meeting_code = #{meetingCode,jdbcType=VARCHAR})B
		  on (a.mem_id = b.mem_list)
	</select>
	
	
	<!-- 프로젝트 소속된 맴버들 참여자 목록 -->
	<select id="chackmember" parameterType="kr.or.ddit.vo.DataListVO" resultType="kr.or.ddit.vo.ProjectMemberVO">
		SELECT
		    a.mem_id,
		    p_code,
		    MEM_NICKNAME
		FROM
		    p_mem a inner join member b
		    on(a.mem_id= b.mem_id)
		    
		where p_code = #{pCode}
		 and a.OUT_STATUS =0
	</select>
	
	<!-- 회의록 참여자 삭제 / 회의록 딜레트 사용  -->	
	<delete id="deleteMeetingMemberList" parameterType="String">
	DELETE FROM meeting_mem
    WHERE
        meeting_code = #{meetingCode,jdbcType=VARCHAR}
	</delete>
	
	<!-- 회의록 수정 -->
	<update id="updateMeeting" parameterType="kr.or.ddit.vo.MeetingVO">
		UPDATE meeting
	    SET
	        meeting_topic =#{meetingTopic,jdbcType=VARCHAR}
	        ,meeting_content =#{meetingContent,jdbcType=CLOB}
	        ,meeting_result =#{meetingResult,jdbcType=CLOB}
	    WHERE
	         meeting_code =#{meetingCode,jdbcType=VARCHAR}
	</update>
	
	
	<!-- 회의록 삭제 -->
	<delete id="deleteMeeting" parameterType="String">
	DELETE FROM meeting
    WHERE
        meeting_code = #{meetingCode,jdbcType=VARCHAR}
	</delete>
	
</mapper>