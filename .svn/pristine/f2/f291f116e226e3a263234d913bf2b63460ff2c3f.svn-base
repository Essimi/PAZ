package kr.or.ddit.issue.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.issue.service.IssueService;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.project.service.ProjectService;
import kr.or.ddit.vo.IssueRecipientVO;
import kr.or.ddit.vo.IssueVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProjectVO;
import oracle.security.crypto.cert.ext.IssuerAltNameExtension;

@Controller
public class IssueWriteController {
	
	@Inject
	private IssueService issueService;
	
	@Inject
	private MemberService memberService;
	
	@RequestMapping("project/{pCode}/issue/issueWrite.do")
	public String issueInsertGet(
			@PathVariable("pCode") String pCode,
			Model model
			) {
		ProjectVO project = new ProjectVO();
		project.setpCode(pCode);
		List<MemberVO> memList = memberService.projectMemberList(project);
		model.addAttribute("memList", memList);
		
		return "issue/issueWrite";
	}
	
	@RequestMapping(value="project/{pCode}/issue/issueWrite.do", method=RequestMethod.POST)
	public String issueInsert(
			@PathVariable("pCode") String pCode,
			@ModelAttribute("issue") IssueVO issue,
			@RequestParam("Recipients") String[] Recipients,
			Model model
			) {
		ArrayList<IssueRecipientVO> issueRecipients = new ArrayList<>();
		for(String memId : Recipients) {
			IssueRecipientVO recipient = new IssueRecipientVO();
			recipient.setMemId(memId);
			issueRecipients.add(recipient);
		}
		issue.setIssueRecipients(issueRecipients);
		issue.setpCode(pCode);
		
		ServiceResult result = issueService.createIssue(issue);
		String viewName = null;
		ServiceResult status = ServiceResult.OK;
		switch (result) {
		case OK:
			viewName = "redirect:/project/" + pCode + "/issue/issueList.do";
			break;
		default:
			viewName = "issue/issueWrite";
			status = ServiceResult.FAILED;
			break;
		}
		
		model.addAttribute("status", status);
		
		return viewName;
	}
}
