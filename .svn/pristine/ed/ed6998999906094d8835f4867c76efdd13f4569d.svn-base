<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 비밀번호 암호화 객체 생성 -->
	<!-- 기존의 여러 암호화 방식을 가지고 있는 객체를 사용하기 위해 팩토리 패턴으로 객체를 가져옴. -->
	<!-- service에서 암호화 할때 사용 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.factory.PasswordEncoderFactories" 
		factory-method="createDelegatingPasswordEncoder" 
	/>
	
	<!-- 인증여부를 확인할수 있는 객체 -->
	<!-- 비밀번호 암호화 객체와  -->
	<!-- hideUserNotFoundExceptions="false" : 최초의 에러를 남겨놓는다.  -->
	<beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider" 
		p:userDetailsService-ref="userDetailService"
		p:passwordEncoder-ref="passwordEncoder"
		p:hideUserNotFoundExceptions="false"
	/>
	
	<!-- 로그인 인증 -->
	<!-- dao를 사용할수 있는 객체를 참조해 db의 데이터를 이용해 인증할 수 있도록함. -->
	<authentication-manager id="authManager">
		<authentication-provider ref="daoAuthenticationProvider" />
	</authentication-manager>

	<!-- 역할 이름앞에 붙일 prefix설정 -->
	<beans:bean id="grantedAuthorityDefaults" class="org.springframework.security.config.core.GrantedAuthorityDefaults" 
		c:rolePrefix=""
	/>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.ConsensusBased"
		p:allowIfEqualGrantedDeniedDecisions="false"
		p:messageSource-ref="messageSource"
	>
		<beans:constructor-arg name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
<!-- 					권한 계층 구조 관련, RoleHierarchyImpl API 문서 참고. -->
				<beans:bean class="org.springframework.security.access.vote.RoleHierarchyVoter"
					p:rolePrefix="#{grantedAuthorityDefaults.rolePrefix}"
				>
					<beans:constructor-arg name="roleHierarchy">
						<!-- ">" 로 계층구분해 인식하는 객체 -->
						<beans:bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
							<beans:property name="hierarchy">
								<beans:bean class="kr.or.ddit.security.auth.RoleHierarchyStringFactoryBean" />
							</beans:property>
						</beans:bean>
					</beans:constructor-arg>
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	<!-- 권한과 역할을 서버시작시 가져와 세팅하는 객체 -->
	<beans:bean id="requestMap" class="kr.or.ddit.security.auth.RequestMapFactoryBean" />
	
	
	<beans:bean id="filterInvocationSecurityMetadataSource" class="kr.or.ddit.security.auth.ReloadableFilterInvocationSecurityMetadataSource" 
		c:requestMap-ref="requestMap"
	/>
	
	<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" 
		p:authenticationManager-ref="authManager"
		p:accessDecisionManager-ref="accessDecisionManager"
		p:securityMetadataSource-ref="filterInvocationSecurityMetadataSource"
		p:messageSource-ref="messageSource"
	/>
	
	<beans:bean id="webInvocationPrivilegeEvaluator" class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator" 
		c:securityInterceptor-ref="filterSecurityInterceptor"
	/>
	
	<!-- 메세지 properties 가져오기 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		p:basenames="kr.or.ddit.msgs.errorMessage, org.springframework.security.messages, kr.or.ddit.mailInfo, kr.or.ddit.git"
	/>
	<!-- 메세지 properties를 사용하기위한 Accessor 객체 -->	
	<beans:bean id="messageSourceAccessor" class="org.springframework.context.support.MessageSourceAccessor" 
		c:messageSource-ref="messageSource"
	/>
	<!-- messageSourceAccessor를 사용하긴위한 MessageUtils 클래스 bean에 등록 -->
	<beans:bean id="messageUtils" class="kr.or.ddit.utils.MessageUtils"
		c:msgAccessor-ref="messageSourceAccessor"
	/>
	
	<!-- 이메일 전송 설정 프로퍼티 el을 사용하기위해 util로 가져옴.-->
<!-- 	<util:properties id="mailInfo" location="classpath:kr/or/ddit/mailInfo.properties"/> -->
<!-- 	<beans:bean id="javaMailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl"> -->
<!-- 		<beans:property name="host" value="smtp.gamil.com"/> -->
<!--         <beans:property name="port" value="587"/> -->
<!--         <beans:property name="username" value="wjdwogml3156@gmail.com"/>  -->
<!--         <beans:property name="password" value="flnknklufaqhabzd"/>  -->
<!--         <beans:property name="defaultEncoding" value="UTF-8"/>  -->
<!-- 		<beans:property name="javaMailProperties"> -->
<!-- 			<beans:props> -->
<!-- 				<beans:prop key="mail.transport.protocol">smtp</beans:prop> -->
<!-- 				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop> -->
<!-- 				<beans:prop key="mail.smtp.auth">true</beans:prop> -->
<!-- 				<beans:prop key="mail.debug">true</beans:prop> -->
<!-- 			</beans:props> -->
<!-- 		</beans:property> -->
<!-- 	</beans:bean> -->
		

	<!-- locale 처리 -->
<!-- 	<beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"  -->
<!-- 		p:cookieName="languageCookie" -->
<!-- 		p:cookieMaxAge="#{60*60*24*7}" -->
<!-- 		p:cookiePath="/" -->
<!-- 	/> -->
<!-- 	<beans:bean id="i18nSupportFilter" class="kr.or.ddit.filter.I18nSupportFilter" /> -->
	
	
	<!-- auto-config : 폼 로그인, 로그아웃, remember-me등의 기능들을 사용하기위한 on/off 설정 -->
	<http 
		authentication-manager-ref="authManager"
		access-decision-manager-ref="accessDecisionManager"
		auto-config="true"
		use-expressions="true">
		<!-- security가 제공하는 UI가 아닌 임의로만든 UI를 사용 -->
		<!-- 처리할 컨트롤러, 파라미터명 등을 세팅 -->
		<!-- default-target-url : 성공시 웰컴 페이지로 이동 -->
		<form-login
			login-page="/login/login.do"
			login-processing-url="/login/loginProcess.do"
			username-parameter="memId"
			password-parameter="memPass"
			default-target-url="/project/myprojectList.do"
			always-use-default-target="false"
			authentication-failure-handler-ref="loginFailureHandler"
		/>
		<!-- rememberMe 설정 -->
		<remember-me key="PAZKEY" remember-me-parameter="remember-Me" token-validity-seconds="86400" user-service-ref="userDetailService"/>
		<logout logout-url="/login/logout.do" 
				invalidate-session="true" 
				logout-success-url="/" />
		
		<anonymous enabled="true" username="anonymous" granted-authority="IS_AUTHENTICATED_ANONYMOUSLY"/>
		
		<!-- 기존의 객체 앞에서 커스텀 객체를 먼저 작동하게 설정 -->
<!-- 		<custom-filter ref="i18nSupportFilter" before="FIRST"/> -->
		<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
<!-- 		<intercept-url pattern="/mypage.do" access="isAuthenticated()"/> -->
<!-- 		<intercept-url pattern="/member/memberInsert.do" access="isAnonymous()"/> -->
<!-- 		<intercept-url pattern="/member/memberUpdate.do" access="isAuthenticated()"/> -->
<!-- 		<intercept-url pattern="/member/memberDelete.do" access="isAuthenticated()"/> -->
<!-- 		<intercept-url pattern="/member/**" access="hasRole('ROLE_ADMIN')"/> -->
<!-- 		<intercept-url pattern="/prod/prodInsert.do" access="hasRole('ROLE_ADMIN')"/> -->
<!-- 		<intercept-url pattern="/prod/prodUpdate.do" access="hasRole('ROLE_ADMIN')"/> -->
<!-- 		<intercept-url pattern="/**" access="permitAll"/> -->
		<csrf disabled="true"/>
	</http>
	
</beans:beans>
















