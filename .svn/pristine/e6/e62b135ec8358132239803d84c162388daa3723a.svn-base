package kr.or.ddit.payment.refund.controller;

import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.JsonObject;
import com.siot.IamportRestClient.IamportClient;

import kr.or.ddit.payment.refund.service.PayRefundService;
import kr.or.ddit.vo.PayVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class RefundController {
	
private IamportClient api;

@Inject
private PayRefundService service;
	
//  현재 미적용 입니다.
//	public void HomeController() {
//    	// REST API 키와 REST API secret 를 아래처럼 순서대로 입력한다.
//		//this.api = new IamportClient("9508002261851383","cb3bd358575287882ecd10bae292935aaf858c3c8f98a12f0bb174bdbd3416f0028e9f485ba52d15");
//	}
//		
	
//  환불 메소드
//	@ResponseBody
//	@RequestMapping(value="/project/PayController.do/{imp_uid}", method = RequestMethod.POST)
//	public IamportResponse<Payment> paymentByImpUid(@PathVariable(value= "imp_uid") String imp_uid) throws IamportResponseException, IOException{
//	
//		// 키값 입력 후 객체 생성
//		api = new IamportClient("9508002261851383","cb3bd358575287882ecd10bae292935aaf858c3c8f98a12f0bb174bdbd3416f0028e9f485ba52d15");
//				
//		// 서버에서 받은 값을 보냅니다.
//		return api.paymentByImpUid(imp_uid);
//	}

	// 마지막 결제내역 조회
	@RequestMapping("project/payInfo.do")
	@ResponseBody
    public PayVO payInfo(Model model) {
    	
		// 세션에서 받아온 프로젝트 코드 값을 넣어줘서 쿼리문 조건절에 사용합니다.
		
		String pCode = "PROJECT00012";
		
		PayVO pay = service.payInfo(pCode);
		
		return pay;
    }
	
	// 결제를 하기 전 검증
	@RequestMapping("project/payRefund.do")
	@ResponseBody
	public List<String> payRefund(Model modal) throws Exception {
		
		// 우선 한 달이 지났는지 안 지났는지 알기위해 검증을 하기 위한 데이터를 부릅니다.
		// 세션에서 받아온 프로젝트 코드 값을 넣어줘서 쿼리문 조건절에 사용합니다.
		String pCode = "PROJECT00012";
		
		PayVO pay = service.payInfo(pCode);
		
		// 결제일자를 숫자만 출력되게 변형합니다.
		String payDate = pay.getPayDate().replaceAll("[^0-9]", "");
		
		// 하단의 메소드를 이용하여 달을 더해줍니다.
		String addPayDate = AddDate(payDate, 1);
		
		// 현재 날짜를 형식에 맞게 구해옵니다.
		SimpleDateFormat date = new SimpleDateFormat("yyyyMMdd");
		String nowDate = date.format(System.currentTimeMillis());
		
		// 비교를 위해 int 형식으로 변환해줍니다.
		int realPayDate = Integer.parseInt(addPayDate);
		int realNowDate = Integer.parseInt(nowDate);
		
		// 현재일자와, 한 달을 더한 결제일자를 비교해줍니다.
		if(realNowDate < realPayDate) {
			// 만약 결제일자가 더 크다면 환불이 가능합니다.
			
// 			미사용, ajax 통신으로 사용할 예정
//			HttpURLConnection conn = null;
//			String access_token = null; // 발급받을 액세스 토큰 변수명을 초기화합니다.
//			URL url = new URL("https://api.iamport.kr/users/getToken"); // 토큰을 받아올 주소를 입력합니다.
//			conn = (HttpURLConnection)url.openConnection();
//			
//			conn.setRequestMethod("POST"); // POST 로 요청합니다.
//			
//			// Header 를 설정해줍니다.(json 형식으로 데이터 전송)
//			conn.setRequestProperty("Content_Type", "application/json");
//			// 서버로부터 받을 데이터 형식을 json 으로 요청합니다.
//			conn.setRequestProperty("Accept", "application/json");
//			// OutPutStream 으로 POST 데이터를 넘겨주겠다는 옵션을 설정합니다.
//			conn.setDoOutput(true);
//			
//			JsonObject obj = new JsonObject();
		
			// 값을 넘겨주기 위해 리스트를 생성해줍니다.
			List<String> rest = new ArrayList<String>();
			
			String rest_api = "9508002261851383";
			String rest_api_secret = "cb3bd358575287882ecd10bae292935aaf858c3c8f98a12f0bb174bdbd3416f0028e9f485ba52d15";
			
			rest.add(rest_api);
			rest.add(rest_api_secret);
			
			return rest;
			
		}else {
			// 결제일자가 더 작다면 한 달이 지난 의미이기 때문에 환불이 불가능해야 합니다.
			return null;
		}
	}
	
	// 날짜계산을 위한 메소드
	private static String AddDate(String strDate, int month) throws Exception{
		
		// 날짜형식을 지정해줍니다.
		SimpleDateFormat dtFormat = new SimpleDateFormat("yyyyMMdd");
		
		// Calendar 객체를 생성해줍니다.
		Calendar cal = Calendar.getInstance();
		
		// 파라메터로 받아온 값을 데이터 형식으로 변환해줍니다.
		Date dt = dtFormat.parse(strDate);
		
		// 생성한 Calender 객체에 변형된 파라메터를 넣어줍니다.
		cal.setTime(dt);
		
		// 객체에 원하는 작업(현재 MONTH 계산만 적용함)을 수행할 로직을 작성합니다.
		cal.add(Calendar.MONTH, month);
		
		return dtFormat.format(cal.getTime());
	}
}