<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.task.dao.TaskDAO">

	<!-- detailSearch -->
	<sql id="searchFrag">
		<!--  <trim prefix=" AND "> -->
		 	<if test="detailSearch neq null">
		 		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.memId)">
		 			AND A.MEM_ID = #{detailSearch.memId}
		 		</if>
		 		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.workStatus)">
		 			AND A.WORK_STATUS = #{detailSearch.workStatus}
		 		</if>
		 		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.importance)">
		 			AND A.IMPORTANCE = #{detailSearch.importance}
		 		</if>
		 		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.workName)">
		 			AND INSTR(A.WORK_NAME, #{detailSearch.workName}) > 0
		 		</if>
		 	</if>   	
		<!--  </trim> -->
	</sql>
	
	
	<!-- 게시글 총 개수 조회 -->
	<select id = "selectTaskTotalRecord" resultType = "int" parameterType = "kr.or.ddit.vo.PagingVO">
		SELECT COUNT(*)
		FROM WORK A
	    WHERE A.P_CODE = #{detailSearch.pCode}
	    <include refid="searchFrag" />
	</select>
	
	

   

	<!-- 업무 리스트 조회 -->
	<select id="selectTaskList" parameterType="kr.or.ddit.vo.PagingVO" resultType="kr.or.ddit.vo.TaskVO">
				
		  SELECT P.* 
		    FROM(
		     SELECT D.*, ROWNUM RNUM
		            FROM (
		                SELECT C.*
		                FROM (
		                    SELECT B.MEM_NICKNAME
		                           , A.WORK_CODE
		                           , A.P_CODE
		                           , A.MEM_ID
		                           , A.TOP_WORK_CODE
		                           , D.WORK_NAME topWorkName
		                           , A.WORK_STATUS
		                           , A.WORK_NAME
		                           , A.WORK_CONTENTS
		                           , TO_CHAR(A.WORK_START, 'YYYY-MM-DD') WORK_START
		                           , TO_CHAR(A.WORK_DEADLINE, 'YYYY-MM-DD') WORK_DEADLINE
		                           , C.PROGRESS_NAME PROGRESS
		                           , A.IMPORTANCE
		                      FROM WORK A, MEMBER B, WORK_PROGRESS C,
		                    (SELECT WORK_CODE,
		                            WORK_NAME
		                       FROM WORK 
		                      WHERE WORK_CODE IN (SELECT TOP_WORK_CODE
		                                            FROM WORK)) D
		                WHERE A.MEM_ID = B.MEM_ID
		                  AND A.PROGRESS = C.PROGRESS
		                  AND A.TOP_WORK_CODE = D.WORK_CODE(+)
		                  AND A.P_CODE = #{detailSearch.pCode}
		                   <include refid="searchFrag" />
		                  
		                ) C  ORDER BY C.WORK_CODE DESC
		            ) D
		           )P 
		           
				<![CDATA[   
					WHERE  RNUM BETWEEN #{startRow} AND #{endRow}   ]]>             
			       
	</select>
	
	<!-- 상위 업무 검색 시 리스트 -->
	<select id="selectTopTaskSearchList" parameterType="kr.or.ddit.vo.TaskVO" resultType="kr.or.ddit.vo.TaskVO">
		SELECT WORK_NAME, WORK_CODE
		  FROM WORK
		 WHERE REPLACE(WORK_NAME, ' ', '') LIKE REPLACE('%'||#{workName}||'%', ' ', '')
		   AND P_CODE = #{pCode} 
	</select>
	
	
	
		<!-- 간트차트를 위한 업무 리스트  -->
	<select id="justTaskList" resultType="TaskVO">
	SELECT
    work_code,
    'PROJECT00004',
    'aa002',
    top_work_code,
    a.work_status,
    work_name,
    work_contents,
    work_start,
    work_deadline,
    a.progress,
    importance,
    b.PROGRESS,
    b.PROGRESS_NAME,
    c.WORK_STATUS_NAME,
    c.WORK_STATUS,
    d.MEM_ID,
    d.MEM_NICKNAME
FROM
    work a, WORK_PROGRESS b, WORK_STATUS c, member d
where a.PROGRESS = b.PROGRESS
and a.WORK_STATUS = c.WORK_STATUS
and a.MEM_ID = d.MEM_ID
    order by a.work_code
	</select>
	
	
	
	<!-- 업무 정보 수정 -->
	<update id="updateTask" parameterType="kr.or.ddit.vo.TaskVO">
		 UPDATE WORK
			SET
			      TOP_WORK_CODE = #{topWorkCode, jdbcType=VARCHAR}
			    , WORK_STATUS = #{workStatus, jdbcType=VARCHAR}
			    , WORK_NAME = #{workName, jdbcType=VARCHAR}
			    , WORK_CONTENTS =#{workContents, jdbcType=CLOB}
			    , WORK_START = #{workStart, jdbcType=DATE}
			    , WORK_DEADLINE = #{workDeadline, jdbcType=DATE}
			    , PROGRESS = #{progress, jdbcType=VARCHAR}
			    , IMPORTANCE = #{importance, jdbcType=VARCHAR}
			    
			WHERE
	   		   WORK_CODE = #{workCode, jdbcType=VARCHAR}
	</update>
	
	
	<!-- 업무 수정 내역 저장 (modify_history) -->
	<update id="insertModifyHistory" parameterType="kr.or.ddit.vo.ModifyHistoryVO">
	
		<selectKey keyProperty="modifyCode" resultType="string" order="BEFORE">
			SELECT 'MODIFY_' || LPAD(MODIFY_HISTORY_SEQ.NEXTVAL, 5, '0')
			FROM DUAL
		</selectKey>
		
		
		INSERT INTO modify_history (
		    MODIFY_CODE,
		    WORK_CODE,
		    MODIFY_DATE,
		    COLUMN_KEY,
		    BEFORE_VALUE,
		    AFTER_VALUE,
		    MODIFIER_ID
		) VALUES (
		    #{modifyCode, jdbcType=VARCHAR},
			#{workCode, jdbcType=VARCHAR},
			SYSDATE,
			#{columnKey, jdbcType=VARCHAR},
			#{beforeValue, jdbcType=CLOB},
			#{afterValue, jdbcType=CLOB},
			#{modifierId, jdbcType=VARCHAR}
		)
		
	</update>
	
	
	
		
	<resultMap type="kr.or.ddit.vo.TaskVO" id="resultModify" autoMapping="true">
   		<id property="workCode" column="WORK_CODE"/>
   		<result property="topWorkCode" column="TOP_WORK_CODE" />
   		<result property="workStatus" column="WORK_STATUS" />
   		<result property="workName" column="WORK_NAME" />
   		<result property="workContents" column="WORK_CONTENTS" />
   		<result property="workStart" column="WORK_START" />
   		<result property="workDeadline" column="WORK_DEADLINE" />
   		<result property="progress" column="PROGRESS" />
   		<result property="importance" column="IMPORTANCE" />
   		
   		<collection property="modifyHistoryList"  ofType="kr.or.ddit.vo.ModifyHistoryVO" autoMapping="true">
   			 <id property="modifyCode" column="MODIFY_CODE" />
   			 <result property="modifyDate" column="MODIFY_DATE" />
   			 <result property="columnKey" column="COLUMN_KEY" />
   			 <result property="beforeValue" column="BEFORE_VALUE" />
   			 <result property="afterValue" column="AFTER_VALUE" />
   			 <result property="modifierId" column="MODIFIER_ID" />
   		</collection>
    </resultMap>
    
    
	<!-- 업무 상세 내용 조회 -->
	<select id="selectTask" parameterType="kr.or.ddit.vo.TaskVO" resultMap = "resultModify">
      SELECT
		    A.MEM_ID,
		    A.TOP_WORK_CODE,
		    A.WORK_STATUS,
		    A.WORK_NAME,
		    A.WORK_CONTENTS,
		    TO_CHAR(A.WORK_START, 'YYYY-MM-DD') WORK_START,
		    TO_CHAR(A.WORK_DEADLINE, 'YYYY-MM-DD') WORK_DEADLINE,
		    A.PROGRESS,
		    A.IMPORTANCE,
            B.MODIFY_CODE,
            B.WORK_CODE,
            TO_CHAR(B.MODIFY_DATE, 'YYYY-MM-DD') MODIFY_DATE,
            B.COLUMN_KEY,
            B.BEFORE_VALUE,
            B.AFTER_VALUE,
            B.MODIFIER_ID
		FROM
		    WORK A, MODIFY_HISTORY B
		WHERE A.WORK_CODE = B.WORK_CODE(+)
		  AND A.WORK_CODE = #{workCode}
		  AND A.P_CODE = #{pCode}
		  ORDER BY B.MODIFY_CODE DESC
	</select>
	
	
	
	<!-- 업무 삭제 -->
	<update id="deleteTask" parameterType="kr.or.ddit.vo.TaskVO">
		DELETE FROM WORK
			  WHERE WORK_CODE = #{workCode}
	
	</update>
	
	
	<update id="insertTask" parameterType="kr.or.ddit.vo.TaskVO">
	
		<selectKey keyProperty="workCode" resultType="string" order="BEFORE">
				SELECT 'WORK' || LPAD(WORK_SEQ.NEXTVAL, 5, '0')
				FROM DUAL
		</selectKey>
		
			INSERT INTO work (
			    work_code,
			    p_code,
			    mem_id,
			    top_work_code,
			    work_status,
			    work_name,
			    work_contents,
			    work_start,
			    work_deadline,
			    progress,
			    importance
			) VALUES (
			    #{workCode, jdbcType=VARCHAR},
			    #{pCode, jdbcType=VARCHAR},
			    #{memId, jdbcType=VARCHAR},
			    #{topWorkCode, jdbcType=VARCHAR},
			    #{workStatus, jdbcType=VARCHAR},
			    #{workName, jdbcType=VARCHAR},
			    #{workContents, jdbcType=CLOB},
			    #{workStart, jdbcType=DATE},
			    #{workDeadline, jdbcType=DATE},
			    #{progress, jdbcType=VARCHAR},
			    #{importance, jdbcType=VARCHAR}
			)
	</update>
	
	
	
	
</mapper>