package kr.or.ddit.websocket;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.springframework.security.core.Authentication;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.MemberVOWrapper;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class EchoWebsocketHandler extends TextWebSocketHandler {
	
	private static Map<String, WebSocketSession> sessionList = new HashMap<>();
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		
		log.info("session 웹소켓 주소 {}", session.getUri());
		
		String url = session.getUri().toString();
		String[] arr = url.split("/");
		
		sessionList.put(arr[arr.length-2] + "/" + arr[arr.length-1], session);
		
		log.info("세션리스트조회 {}", sessionList);
		
	}
	
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		
		log.info("연결 종료");
		
		// sessionList.remove(session); 동일한 세션을 삭제한다.
		// chatInfoList.remove(session); 삭제할 웹소켓 세션
		
	}
	
	public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
		log.error("연결 에러 발생", exception);
	}
	
	
	@Override
	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
		
		Authentication auth = (Authentication) session.getPrincipal();
		MemberVOWrapper member = (MemberVOWrapper)auth.getPrincipal();
		
		MemberVO memberinfo = member.getAuthMember();
		
		String sender = memberinfo.getMemId();
		
		String receiveMsg = (String) message.getPayload(); // 실제 전달 된 메시지를 가지고 있다.
		
		Map<String, String> messageMap = new HashMap<>();
		
		messageMap.put("sender", sender);
		messageMap.put("message", receiveMsg);
		
		String jsonMsg = new ObjectMapper().writeValueAsString(messageMap); 
		// messageMap을 String 타입으로 변환한다.
		
		log.info("jsonMsg는 어떤 형식으로 변환되는가 {}", jsonMsg);
		
		// 현재의 세션리스트 중 채팅방의 코드가 동일한 세션에만 메시지를 전달한다.
		
		log.info("이 핸들러를 타고있다 {}", message);
		log.info("이 핸들러를 타고있다 {}", session);
		
		// String contains()
		
		String url = session.getUri().toString();
		String[] arr = url.split("/");
		
		for(String key : sessionList.keySet()) {
			
			if (key.contains(arr[arr.length-2])) {
				
				log.info("이것은 포함되어 있는 채팅방의 코드를 본다." + arr[arr.length-2]);
				
				WebSocketSession tmp = null;
				tmp = sessionList.get(key);
				tmp.sendMessage(new TextMessage(jsonMsg));
				
			}
				
        }
		
	}

}
